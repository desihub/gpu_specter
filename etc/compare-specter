#!/usr/bin/env python

import argparse
import os

import numpy as np

from gpu_specter.io import read_img, read_psf
from gpu_specter.core import extract_frame

try:
    import specter.psf
    import specter.extract
    specter_available = True
except ImportError:
    specter_available = False


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", type=str, required=True,
                        help="input image")
    parser.add_argument("-p", "--psf", type=str, required=True,
                        help="input psf file")
    parser.add_argument("-s", "--specmin", type=int, required=False, default=0,
                        help="first spectrum to extract")
    parser.add_argument("-n", "--nspec", type=int, required=False, default=500,
                        help="number of spectra to extract")
    parser.add_argument("--bundlesize", type=int, required=False, default=25,
                        help="number of spectra per bundle")
    parser.add_argument("--nsubbundles", type=int, required=False, default=5,
                        help="number of extraction sub-bundles")
    parser.add_argument("-w", "--wavelength", type=str, required=False, default='5760.0,7620.0,0.8',
                        help="wavemin,wavemax,dw")
    parser.add_argument("--nwavestep", type=int, required=False, default=50,
                        help="number of wavelength steps per divide-and-conquer extraction step")
    parser.add_argument("--pull-threshold", type=float, required=False, default=0.01,
                        help="pull distribution threshold to use for comparing results")
    parser.add_argument("--mpi", action="store_true", help="Use MPI for parallelism")
    parser.add_argument("--gpu", action="store_true", help="Use GPU device")
    args = parser.parse_args()

    if not specter_available:
        raise RuntimeError('Could not import specter')

    if args.mpi:
        from mpi4py import MPI
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    if rank == 0:
        psf = read_psf(args.psf)
        img = read_img(args.input)
    else:
        psf = None
        img = None

    frame_spex = extract_frame(
        img, psf, args.bundlesize,
        args.specmin, args.nspec,
        wavelength=args.wavelength,
        nwavestep=args.nwavestep, nsubbundles=args.nsubbundles,
        comm=comm,
        gpu=args.gpu,
        loglevel='INFO',
    )

    if rank == 0:

        specter_psf = specter.psf.load_psf(args.psf)

        # use the same wavelength array
        wavelengths = frame_spex['wave']

        frame_specter = specter.extract.ex2d(
            img['image'], img['ivar'], specter_psf,
            args.specmin, args.nspec, wavelengths,
            xyrange=None, regularize=0.0, ndecorr=False,
            bundlesize=args.bundlesize, nsubbundles=args.nsubbundles,
            wavesize=args.nwavestep,
            full_output=True, verbose=True,
            debug=False, psferr=None,
        )

        diff = frame_spex['specflux'] - frame_specter['flux']
        norm = np.sqrt(1.0/frame_spex['specivar'] + 1.0/frame_specter['ivar'])
        pull = diff/norm
        pull_fraction = np.average(np.abs(pull).ravel() < args.pull_threshold)

        print(f'fraction of pixels with (pull < {args.pull_threshold}): {pull_fraction}')



if __name__ == "__main__":
    main()
