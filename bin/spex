#!/usr/bin/env python

"""
Experimental rewrite of desi_extract_spectra + specter
"""

import argparse
from pkg_resources import resource_filename

import numpy as np

from gpu_specter.util import get_logger, Timer
from gpu_specter.io import read_img, read_psf, write_frame
from gpu_specter.core import extract_frame

def parse(options=None):
    parser = argparse.ArgumentParser(description="Extract spectra from pre-processed raw data.",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-i", "--input", type=str, required=False,
                        help="input image")
    # parser.add_argument("-f", "--fibermap", type=str, required=False,
    #                     help="input fibermap file")
    parser.add_argument("-p", "--psf", type=str, required=False,
                        help="input psf file")
    parser.add_argument("-o", "--output", type=str, required=True,
                        help="output extracted spectra file")
    # parser.add_argument("-m", "--model", type=str, required=False,
    #                     help="output 2D pixel model file")
    parser.add_argument("-w", "--wavelength", type=str, required=False,
                        help="wavemin,wavemax,dw")
    parser.add_argument("-s", "--specmin", type=int, required=False, default=0,
                        help="first spectrum to extract")
    parser.add_argument("-n", "--nspec", type=int, required=False, default=500,
                        help="number of spectra to extract")
    # parser.add_argument("-r", "--regularize", type=float, required=False, default=0.0,
    #                     help="regularization amount (default %(default)s)")
    parser.add_argument("--bundlesize", type=int, required=False, default=25,
                        help="number of spectra per bundle")
    parser.add_argument("--nsubbundles", type=int, required=False, default=5,
                        help="number of extraction sub-bundles")
    parser.add_argument("--nwavestep", type=int, required=False, default=50,
                        help="number of wavelength steps per divide-and-conquer extraction step")
    # parser.add_argument("-v", "--verbose", action="store_true", help="print more stuff")
    parser.add_argument("--loglevel", default='info', help='log print level (debug,info,warn,error)')
    parser.add_argument("--mpi", action="store_true", help="Use MPI for parallelism")
    parser.add_argument("--gpu", action="store_true", help="Use GPU for extraction")
    # parser.add_argument("--decorrelate-fibers", action="store_true", help="Not recommended")
    # parser.add_argument("--no-scores", action="store_true", help="Do not compute scores")
    # parser.add_argument("--psferr", type=float, default=None, required=False,
    #                     help="fractional PSF model error used to compute chi2 and mask pixels (default = value saved in psf file)")
    # parser.add_argument("--fibermap-index", type=int, default=None, required=False,
    #                     help="start at this index in the fibermap table instead of using the spectro id from the camera")
    # parser.add_argument("--barycentric-correction", action="store_true", help="apply barycentric correction to wavelength")
    
    args = None
    if options is None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(options)
    return args

def check_input_options(args):
    """
    Perform pre-flight checks on input options
    
    returns ok(True/False), message
    """
    if args.bundlesize % args.nsubbundles != 0:
        msg = 'bundlesize ({}) must be evenly divisible by nsubbundles ({})'.format(
            args.bundlesize, args.nsubbundles)
        return False, msg
    
    if args.nspec % args.bundlesize != 0:
        msg = 'nspec ({}) must be evenly divisible by bundlesize ({})'.format(
            args.nspec, args.bundlesize)
        return False, msg
    
    if args.specmin % args.bundlesize != 0:
        msg = 'specmin ({}) must begin at a bundle boundary'.format(args.specmin)
        return False, msg
    
    return True, 'OK'

def main(args=None):

    timer = Timer()

    if args is None:
        args = parse()

    log = get_logger(args.loglevel)

    #- Preflight checks on input arguments
    ok, message = check_input_options(args)
    if not ok:
        log.critical(message)
        raise ValueError(message)
    
    #- Load MPI only if requested
    if args.mpi:
        from mpi4py import MPI
        import dill
        MPI.pickle.__init__(dill.dumps, dill.loads)
        comm = MPI.COMM_WORLD
        rank, size = comm.rank, comm.size
    else:
        comm = None
        rank, size = 0, 1

    if args.gpu:
        import cupy as cp
        cp.cuda.nvtx.RangePush('extract frame')

    #- For debugging convenience, default input image and psf
    if args.input is None:
        args.input = resource_filename('gpu_specter',
                                       'test/data/preproc-r0-00051060.fits.gz')
        if rank == 0:
            log.warning(f'Using default test input image {args.input}')

    if args.psf is None:
        args.psf = resource_filename('gpu_specter',
                                     'test/data/psf-r0-00051060.fits')
        if rank == 0:
            log.warning(f'Using default test input PSF {args.psf}')

    timer.split('init')

    #- Load inputs
    img = psf = imgpixels = imgivar = None
    if rank == 0:
        log.info('Loading inputs')
        img = read_img(args.input)
        imgpixels = img['image']
        imgivar = img['ivar']
        psf = read_psf(args.psf)
        
    if comm is not None:
        if rank == 0:
            log.info('Broadcasting inputs to other MPI ranks')
        imgpixels = comm.bcast(imgpixels, root=0)
        imgivar = comm.bcast(imgivar, root=0)
        psf = comm.bcast(psf, root=0)

    if args.gpu:
        cp.cuda.nvtx.RangePush('copy imgpixels, imgivar to device')
        imgpixels = cp.asarray(imgpixels)
        imgivar = cp.asarray(imgivar)
        cp.cuda.nvtx.RangePop()

    timer.split('load')

    #- Perform extraction
    frame = extract_frame(
        imgpixels, imgivar, psf,           # input data
        args.bundlesize,                   #
        args.specmin, args.nspec,          # spectra to extract (specmin, specmin + nspec)
        args.wavelength,                   # wavelength range to extract
        args.nwavestep, args.nsubbundles,  # extraction algorithm parameters
        comm, rank, size,                  # mpi parameters
        args.gpu,                          # gpu parameters
        args.loglevel,                     # log
    )

    timer.split('extract')
    if args.gpu:
        cp.cuda.nvtx.RangePop()

    #- Write output
    if rank == 0:

        frame['imagehdr'] = img['imagehdr']
        frame['fibermap'] = img['fibermap']
        frame['fibermaphdr'] = img['fibermaphdr']

        if args.output is not None:
            log.info(f'Writing {args.output}')
            write_frame(args.output, frame)

    #- Print timing summary
    if rank == 0:
        timer.split('write')
        timer.log_splits(log)

if __name__ == '__main__':
    main()
