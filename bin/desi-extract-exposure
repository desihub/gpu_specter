#!/usr/bin/env python

"""
DESI spectral extraction code benchmark
salloc -N 5 -t 2:00:00 -C haswell -q interactive
srun -n 160 -c 2 --cpu_bind=cores ./desi-extract -i $SCRATCH/desi/benchmark/inputs/ -o $SCRATCH/temp $(date +%s)

srun -n 20 -c 1 python bin/desi-extract-exposure /global/cfs/cdirs/desi/spectro/redux/andes $SCRATCH/temp $(date +%s)
"""

import argparse
import glob 
import os
import sys
import time

from desispec.scripts import extract

#- Parse args before initializing MPI so that --help will work anywhere

parser = argparse.ArgumentParser()
parser.add_argument("indir", help="input data directory")
parser.add_argument("outdir", help="output directory")
parser.add_argument("start_time", help="use $(date +%%s)", type=float)
parser.add_argument("--night", type=str, help="YYYYMMDD to extract", default="20200315")
parser.add_argument("--expid", type=str, help="Exposure ID to extract", default="00055672")
parser.add_argument("--spectrographs", type=str,
    help="Comma-separated list of spectrographs to extract", default="0,1,2,3,4,5,6,7,8,9")
parser.add_argument("--colors", type=str,
    help="Comma-separated list of colors to extract", default="b,r,z")
parser.add_argument("--cameras", type=str, default=None,
    help=("Comma separated list of cameras to extract. If not provided then the outer "
          "product of --spectrographs and --colors will be used to construct."))
parser.add_argument("--gpu", action="store_true", help="use GPU")
parser.add_argument("-v", "--verbose", action="store_true", help="print per-rank detailed timing")
args = parser.parse_args()

# TODO: validate night/expid
night = args.night
expid = args.expid

if args.cameras is None:
    spectrographs = args.spectrographs.split(",")
    colors = args.colors.split(",")
    cameras = [
        f"{color}{spec}" for spec in spectrographs for color in colors
    ]
else:
    cameras = args.cameras.split(",")

for camera in cameras:
    color, spectrograph = camera
    assert color in "brz", \
        f"{color} is not a valid color {camera}"
    assert int(spectrograph) in range(10), \
        f"{spectrograph} is not a valid spectrograph {camera}"

# TODO: check for valid cameras

assert os.path.exists(args.indir)
assert os.path.exists(args.outdir)

from mpi4py import MPI

comm = MPI.COMM_WORLD
rank = comm.rank
size = comm.size

if rank == 0:
    print(f"Extracting frames from cameras: {','.join(cameras)}")
    sys.stdout.flush()

comm.barrier()
if rank == 0:
    start_time = args.start_time
    startup_time = time.time() - start_time

# split comm by node
node = MPI.Get_processor_name()
nodes = comm.allgather(node)
nnodes = len(set(nodes))
node_size = size // nnodes

assert node_size * nnodes == size, \
    f"Number of ranks {size} not divisible by number of nodes {nnodes}"

node_rank = rank % node_size
node_index = rank // node_size
node_comm = comm.Split(color=node_index, key=node_rank)

if rank == 0:
    print(f"Splitting {size} ranks into {nnodes} groups of {node_size}")
    sys.stdout.flush()

frames_extracted = []

node_cameras = cameras[node_index::nnodes]
if node_rank == 0:
    print(f"{node}: {','.join(node_cameras)}")
    sys.stdout.flush()

for camera in cameras[node_index::nnodes]:

    img_filename = f"{args.indir}/preproc/{night}/{expid}/preproc-{camera}-{expid}.fits"
    psf_filename = f"{args.indir}/exposures/{night}/{expid}/psf-{camera}-{expid}.fits"
    frame_filename = f"{args.outdir}/frame-{camera}-{expid}.fits"

    if not os.path.isfile(img_filename):
        if node_rank == 0:
            print("Skipping {camera}, image file does not exist: {img_filename}")
            sys.stdout.flush()
        continue
    if not os.path.isfile(psf_filename):
        if node_rank == 0:
            print("Skipping {camera}, psf file does not exist: {psf_filename}")
            sys.stdout.flush()
        continue

    cmd = \
        "desi_extract_spectra --mpi" \
        f" -i {img_filename}" \
        f" -p {psf_filename}" \
        f" -o {frame_filename}"

    #- DEBUG speed
    # if camera.startswith("b"):
    #     cmd = cmd + " -w 4000,4200,1"
    # elif camera.startswith("r"):
    #     cmd = cmd + " -w 6000,6200,1"
    # elif camera.startswith("z"):
    #     cmd = cmd + " -w 9000,9200,1"

    if camera.startswith("b"):
        cmd = cmd + " -w 3600.0,5800.0,0.8"
    elif camera.startswith("r"):
        cmd = cmd + " -w 5760.0,7620.0,0.8"
    elif camera.startswith("z"):
        cmd = cmd + " -w 7520.0,9824.0,0.8"

    cmd = cmd + " --gpu-specter --nsubbundles 5"

    if args.gpu:
        cmd = cmd + " --gpu"

    if node_comm.rank == 0:
        print(rank, cmd)
        sys.stdout.flush()

    cmd_args = extract.parse(cmd.split()[1:])
    extract.main_gpu_specter(cmd_args, comm=node_comm)

    if node_comm.rank == 0:
        frames_extracted.append(camera)

comm.barrier()
end_time = time.time()

nframes = comm.reduce(len(frames_extracted), root=0)
if rank == 0:
    elapsed_time = end_time - start_time
    node_hours = nnodes * elapsed_time / (60 * 60)
    work_rate = nframes / node_hours

    print("desi-extract {} effective frames in {:.1f} min".format(nframes, elapsed_time / 60))
    print("desi-extract effective work rate = {:.2f} frames per node-hour".format(work_rate))
    print("desi-extract startup time: {:.1f} sec".format(startup_time))
    print("desi-extract elapsed time: {:.1f} sec".format(elapsed_time))
